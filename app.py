import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load your trained model and scaler
model = joblib.load('final_model.pkl')
scaler = joblib.load('scaler.pkl')

def preprocess_data(file, delimiter):
    # Read the uploaded file
    content = file.getvalue().decode("utf-8")
    
    # Split the text based on the chosen delimiter
    if delimiter == 'comma':
        data = content.split(',')
    elif delimiter == 'space':
        data = content.split(' ')
    elif delimiter == 'newline':
        data = content.split('\n')
    else:
        st.error('Invalid delimiter selected.')
        return None
    
    # Convert the data to numeric values
    data_numeric = [float(val) for val in data if val.strip()]
    
    # Reshape the data to have 11 features per sample
    num_features = 11
    num_samples = len(data_numeric) // num_features
    reshaped_data = np.array(data_numeric).reshape(num_samples, num_features)
    
    # Scale the data
    scaled_data = scaler.transform(reshaped_data)
    
    return scaled_data



def predict_malware(data):
    # Make predictions using your model
    predictions = model.predict(data)
    
    # Interpret predictions as 'malware' or 'benign'
    if predictions == 1:
        return 'Malware'
    else:
        return 'Benign'



def main():
    st.title('Malware Detection System')
    
    # File upload widget for uploading data
    uploaded_file = st.file_uploader("Upload TXT file", type=['txt'])
    
    # Dropdown for selecting delimiter
    delimiter = st.selectbox('Select delimiter:', ['comma', 'space', 'newline'])
    
    if st.button('Detect Malware'):
        if uploaded_file is not None:
            # Preprocess the uploaded data
            data = preprocess_data(uploaded_file, delimiter)
            
            if data is not None:
                # Perform prediction
                predictions = predict_malware(data)
                
                # Display prediction result
                st.write('Predictions:')
                st.write(predictions)
        else:
            st.warning('Please upload a TXT file.')
        
if __name__ == '__main__':
    main()
